const base = {
  lang: "en"
};
const disasterReco = {
  title: "云际容灾",
  intro:
    "近年来，云数据中心故障屡见不鲜。为了防止用户数据在发生云数据中心故障时永久丢失或长时间不可访问，本云际容灾系统采用纠删码技术将用户数据分块、编码存储到多个云数据中心的多个云主机上。当部分云数据中心发生故障时，本云际容灾系统可使用无故障云数据中心的数据恢复出原始用户数据。本系统采用了专为跨云数据中心纠删码设计的数据写入方法、数据读取方法和数据修复方法，能够同时实现高容灾性、低冗余度和高效率。",
  bannerText: "高性能、低成本、可验证、易运维的容灾服务",
  tab1: "纠删码参数选择",
  tab2: "配置选择",
  tab3: "方案确认",
  tab4: "容灾存储文件查看",
  select: "选择",
  type: "纠删码类型",
  explanation: "迁移选项配置说明",
  next: "下一步",
  prev: "上一步",
  option1:
    "共需13个云主机（其中含12个存储云主机和1个管理云主机），位于3个可用区，系统可容忍任意3个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1，修复效率高。",
  option2:
    "共需9个云主机（其中含8个存储云主机和1个管理云主机），位于2个可用区，系统可容忍任意3个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为5/3，修复效率高。",
  option3:
    "共需7个云主机（其中含6个存储云主机和1个管理云主机），位于2个可用区，系统可容忍任意3个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1 。",
  option4:
    "共需7个云主机（其中含6个存储云主机和1个管理云主机），位于2个可用区，系统可容忍任意3个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1 。",
  option5:
    "共需9个云主机（其中含8个存储云主机和1个管理云主机），位于4个可用区，系统可容忍任意2个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1/3。",
  option6:
    "共需10个云主机（其中含9个存储云主机和1个管理云主机），位于3个可用区，系统可容忍任意3个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1/2。",
  option7:
    "共需13个云主机（其中含12个存储云主机和1个管理云主机），位于2个可用区，系统可容忍任意6个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1。",
  option8:
    "共需13个云主机（其中含12个存储云主机和1个管理云主机），位于3个可用区，系统可容忍任意4个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1/2。",
  formLabel1: "云服务器数量",
  inputTip1: "说明：云服务器数不得少于单条带编码块数。",
  formLabel2: "云数据中心数",
  inputTip2: "说明：云数据中心数不得少于1/容灾率。",
  formLabel3: "CPU数",
  inputTip3: "说明：基于纠删码的跨云容灾方案须要同时运行MySQL、Redis、OpenEC等软件，CPU核数过低将影响软件运行。",
  formLabel4: "系统盘",
  inputTip4: "说明：基于纠删码的跨云容灾方案须要安装MySQL、Redis、OpenEC等软件，系统盘容量过低将影响软件运行。",
  formLabel5: "数据盘",
  inputTip5: "说明：单个云服务器数据盘容量*云服务器数量=可存放的文件大小上限*(1+冗余度)",
  formLabel6: "内存",
  inputTip6: "说明：纠删码编码、解码时需要占用的内存较多，内存过低将无法正常编码、解码。",
  formLabel7: "公网带宽",
  inputTip7: "说明：在基于纠删码的跨云容灾方案中，数据的写入、读取、修复均需要在外网传输数据外网带宽过低将影响读取、写入、修复速度",
  selectOption1:
    "共需13个云主机（其中含12个存储云主机和1个管理云主机），位于3个可用区，系统可容忍任意3个存储云主机失效或1个可用区的全部存储云主机失效，冗余度为1，修复效率高。",
  must: "必须",
  caseTab1: "智能推荐方案",
  caseTab2: "自定义方案选择",
  sourceList: "存储资源列表",
  technicalSpot: "技术亮点",
  technicalSpotHtml: `<p>现有的基于纠删码的存储系统均是面向单云数据中心环境设计的。在跨云数据中心环境下，它们写入、读取、修复数据时需要跨云数据中心（通过公网）传输大量数据，由于公网带宽远低于内网带宽，所以它们写入、读取、修复数据的速度较低。本系统包含了一套专为跨云数据中心纠删码设计的数据写入方法、数据读取方法和数据修复方法，可能通过最小化跨云数据中心传输量来提高写入、读取、修复速度。</p>
    <h4>
    1、跨云数据中心纠删码写入方法
    </h4>
    <p>本方法通过对比接收端云数据中心和发送端云数据中心中的编码块数来选择编码节点，使跨云传输量始终等于接收端云数据中心和发送端云数据中心中编码块数的最小值，从而有效降低了写入数据时的跨云数据中心传输量，从而提高了写入速度。此外，由于本方法将数据的写入过程组织为两级流水线（第一级：客户端写入数据块；第二级：各存储节点协同完成校验块的编码），因而能够进一步提高批量数据的写入速度。</p>
    <h4>1. 降低启动成本</h4>
    <p>Serverless服务使用可以免去自己搭建版本管理服务器、数据库服务器等基础设施，仅需要编写业务逻辑代码即可，对初创企业更加友好。部署、运维等其他服务均由Serverless服务商提供
    </p>
    <h4>2、跨云数据中心纠删码读取方法</h4>
    <p>本方法通过读取距离客户端最近的若干编码块、并对其进行解码来获取原始数据。这种读取方式以增加计算开销为代价达到降低跨云数据中心传输量的目的，由于跨云数据中心纠删码的传输耗时远大于计算耗时，因此这种方式能够提高读取速度。</p>
    <h4>3、跨云数据中心纠删码单云服务器修复方法</h4>
    <p>本方法在修复单个故障云服务器时采用树-星混合拓扑组织数据传输和数据合并：先在各个云数据中心内部采用星型传输拓扑对辅助块进行合并，然后构建最小网络距离生成树来组织各个合并后的辅助块的传输。本方法使得修复云服务器中的每个编码块时的跨云数据中心传输块数不大于云数据中心数减一，因此能够有效提高修复速度。</p>
    <h4>4、跨云数据中心纠删码云数据中心修复方法</h4>
    <p>本方法通过对比接收端云数据中心中的待修复块数和发送端云数据中心中的辅助块数来选择对辅助修复块进行合并的节点，使跨云数据中心传输量始终等于接收端云数据中心中待修复块数和发送端云数据中心中辅助块数的最小值，从而有效降低了云数据中心修复时的跨云传输量，进而提高了云数据中心的修复速度。</p>
  `,
  documentTitle1: "可选纠删码列表及云主机要求",
  documentTitle2: "网络架构",
  documentTitle3: "手动部署流程（购买资源时已部署完成）",
  documentTitle4: "使用方法",
  disasterRecoRequire: `<h1 class="page-title">可选纠删码列表及云主机要求
  </h1>
  <p>1、DFC(12,6,3)，适用于3数据中心部署，单点修复时效率高、无需跨云传输，节点要求：一共使用3个可用区的节点，每个可用区分别包含5（1master+4slave）、4(slave)、4(slave)个云主机。
  </p>
  <p>2、DFC(8,3,3)，单点修复时效率高、无需跨云传输，节点要求：一共使用2个可用区的节点，每个可用区分别包含5（1master+4slave）、4(slave)个云主机。
  </p>
  <p>3、RS(6,3,3)，适用于2数据中心部署，冗余度小，节点要求：一共使用2个可用区的节点，每个可用区分别包含4（1master+3slave）、3(slave)个云主机。
  </p>
  <p>4、RS(6,4,2)，冗余度小，节点要求：一共使用3个可用区的节点，每个可用区分别包含3（1master+2slave）、2(slave)、2(slave)个云主机。
  </p>
  <p>5、RS(8,6,2)，冗余度小，节点要求：一共使用4个可用区的节点，每个可用区分别包含3（1master+2slave）、2(slave)、2(slave) 、2(slave)个云主机。
  </p>
  <p>6、RS(9,6,3)，冗余度小，节点要求：一共使用3个可用区的节点，每个可用区分别包含4（1master+3slave）、3(slave)、3(slave)个云主机。
  </p>
  <p>7、RS(12,6,6)，冗余度小，节点要求：一共使用2个可用区的节点，每个可用区分别包含7（1master+6slave）、6(slave)个云主机。
  </p>
  <p>8、RS(12,8,4)，冗余度小，节点要求：一共使用3个可用区的节点，每个可用区分别包含5（1master+3slave）、4(slave)、4(slave)。
  </p>`
};

export { base, disasterReco };
