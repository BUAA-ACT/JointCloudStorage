image: golang:1.16.2

stages:
  - build
  - docker_build
  - deploy
  - after_deploy

before_script:
  - export GOPATH=$GOPATH:/usr/local/${CI_PROJECT_NAME}
  - export VERSION=`echo ${CI_COMMIT_TAG} | awk -F"_" '{print $1}'`
  - export GO111MODULE=on
  - export GOPROXY=https://goproxy.cn,direct

# scheduler 编译
scheduler_build:
  image: golang:1.16.2
  stage: build
  only:
    - master
    - dev-scheduler
    - dev-scheduler-2
  script:
    - echo '下载依赖'
    - cd service/scheduler
    - go mod tidy
    - echo '开始构建'
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags '-w -s -extldflags "-static"' -o build/bin/scheduler
  artifacts:
    paths:
      - service/scheduler/build/bin/scheduler
    when: always
    expire_in: 4 weeks
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - /go
  tags:
    - docker

# transporter 编译
transporter_build:
  image: golang:1.16.2
  stage: build
  only:
    - master
    - dev-transporter
  script:
    - echo '下载依赖'
    - pwd
    - ls
    - cd service/transporter
    - go mod tidy
    - go mod vendor
    - echo '开始构建'
    - make build
    - echo '构建完成'
  tags:
    - docker
  artifacts:
    paths:
      - service/transporter/build/bin/transporter
    when: always
    expire_in: 4 weeks
  cache:
    key: transporter_go_env
    paths:
      - service/transporter/vendor
      - /go

scheduler_docker_build:
  stage: docker_build
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  variables: 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  dependencies:
    - scheduler_build
  only:
    - master
    - dev-scheduler
    - dev-scheduler-2
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_TOKEN $CI_REGISTRY
  script:
    - echo '构建 scheduler docker 镜像'
    - cd service/scheduler
    - docker build -t scheduler:v1-dev .
    - docker tag scheduler:v1-dev harbor.sumblog.cn/pub/scheduler:v1-dev
    - docker push harbor.sumblog.cn/pub/scheduler:v1-dev
  tags:
    - docker

transporter_docker_build:
  stage: docker_build
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  variables: 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  dependencies:
    - transporter_build
  only:
    - master
    - dev-transporter
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_TOKEN $CI_REGISTRY
  script:
    - echo '构建 transporter docker 镜像'
    - cd service/transporter
    - docker build -t transporter:v1-dev .
    - docker tag transporter:v1-dev harbor.sumblog.cn/pub/transporter:v1-dev
    - docker push harbor.sumblog.cn/pub/transporter:v1-dev
  tags:
    - docker

portal_docker_build:
  stage: docker_build
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  variables: 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  needs: []
  only:
    - master
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_TOKEN $CI_REGISTRY
  script:
    - echo '构建 portal docker 镜像'
    - cd portal
    - docker build -t portal:v1-dev .
    - docker tag portal:v1-dev harbor.sumblog.cn/pub/portal:v1-dev
    - docker push harbor.sumblog.cn/pub/portal:v1-dev
  tags:
    - docker


# 登录项目部署服务器，移除旧版本项目文件，最后将打包好的文件拷贝过去
transporter_deploy_job:
  stage: deploy
  image: kroniak/ssh-client:latest
  only:
    - master
    - dev-transporter
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - cd service/transporter
    - echo '登录项目部署服务器，删除旧 docker，拉取新镜像'
    - scp ./transporter_config.json.docker zhangjh@$DEV_SERVER:/home/zhangjh/transporter/transporter_config.json.docker 
    - ssh zhangjh@$DEV_SERVER "docker pull harbor.sumblog.cn/pub/transporter:v1-dev"
    - ssh zhangjh@$DEV_SERVER "docker rm -f transporter-dev-v1"
    - ssh zhangjh@$DEV_SERVER "docker tag harbor.sumblog.cn/pub/transporter:v1-dev transporter:v1-dev"
    - ssh zhangjh@$DEV_SERVER "docker run -d -p 8083:8083 --name transporter-dev-v1 --mount source=transporter-vol,target=/data/transporter --mount type=bind,source=/home/zhangjh/transporter/transporter_config.json.docker,target=/home/jcspan/config/transporter_config.json,readonly transporter:v1-dev"
  tags:
    - docker

transporter_deploy_test_job:
  stage: after_deploy
  image: golang:1.16.2
  script:
    - cd service/transporter/
    - go mod tidy
    - go mod vendor
    - cd controller
    - echo '开始测试 transporter'
    - go test -v -args -env cloud -host $DEV_SERVER:8083
    - echo 'transporter 测试完成'
  tags:
    - docker
  cache:
    key: transporter_go_env
    paths:
      - service/transporter/vendor
      - /go

